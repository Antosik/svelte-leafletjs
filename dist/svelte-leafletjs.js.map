{"version":3,"file":"svelte-leafletjs.js","sources":["../src/lib/EventBridge.ts","../src/components/LeafletMap.svelte","../src/components/Circle.svelte","../src/components/CircleMarker.svelte","../src/components/GeoJSON.svelte","../src/components/Icon.svelte","../src/components/DivIcon.svelte","../src/components/ImageOverlay.svelte","../src/components/Marker.svelte","../src/components/Polyline.svelte","../src/components/Polygon.svelte","../src/components/Popup.svelte","../src/components/Rectangle.svelte","../src/components/ScaleControl.svelte","../src/components/TileLayer.svelte","../src/components/Tooltip.svelte"],"sourcesContent":["import type {Evented, LeafletEvent, LeafletEventHandlerFn} from 'leaflet';\nimport type {EventDispatcher} from 'svelte';\n\nexport default class EventBridge {\n    private entity: Evented;\n    private eventMap: Record<string, LeafletEventHandlerFn> = {};\n\n    constructor(entity: Evented, dispatch: EventDispatcher<any>, events: string[] = []) {\n        this.entity = entity;\n\n        if (events) {\n            events.forEach(event => {\n                if (event in this.eventMap) {\n                    return;\n                }\n                const handler = function (e: LeafletEvent): void {\n                    dispatch(event, e);\n                };\n                entity.on(event, handler);\n                this.eventMap[event] = handler;\n            });\n        }\n    }\n\n    unregister(): void {\n        Object.entries(this.eventMap).forEach(([event, handler]) => {\n            this.entity.off(event, handler);\n        });\n    }\n}","<script lang=\"ts\">\n    import {createEventDispatcher, setContext} from 'svelte';\n    import type {ActionReturn} from 'svelte/action';\n    import {Map, type MapOptions} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n\n    export let options: MapOptions = {};\n    export let events: string[] = [];\n\n    let map: Map;\n    let eventBridge: EventBridge;\n\n    setContext<MapProvider>(Map, () => map);\n\n    function initialize(container: HTMLElement, parameters?: any): ActionReturn<any> {\n        // BEGIN: Hack to support histoire\n        if ((container.getBoundingClientRect().width === 0) && (container.getBoundingClientRect().height === 0)) {\n            console.log('[WARNING] skipped map initialization, container width and height is 0');\n            return {};\n        }\n        // END: Hack to support histoire\n        map = new Map(container, options);\n        eventBridge = new EventBridge(map, dispatch, events);\n        return {\n            destroy: () => {\n                eventBridge.unregister();\n                map.remove();\n            },\n        };\n    }\n\n    export function getMap(): Map | undefined {\n        return map;\n    }\n</script>\n\n<div style=\"height:100%; width:100%;\" use:initialize>\n    {#if map}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {\n        Circle,\n        type CircleOptions, type FillRule,\n        type LatLngExpression,\n        Layer,\n        type LineCapShape,\n        type LineJoinShape,\n        Map\n    } from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider, MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let latLng: LatLngExpression;\n    export let radius = 10;\n    export let color: string | undefined = '#3388ff';\n    export let weight: number | undefined = 3;\n    export let opacity: number | undefined = 1.0;\n    export let lineCap: LineCapShape | undefined = 'round';\n    export let lineJoin: LineJoinShape | undefined = 'round';\n    export let dashArray: string | number[] | undefined = undefined;\n    export let dashOffset: string | undefined = undefined;\n    export let fill: boolean | undefined = true;\n    export let fillColor: string | undefined = '#3388ff';\n    export let fillOpacity: number | undefined = 0.2;\n    export let fillRule: FillRule | undefined = 'evenodd';\n    export let options: CircleOptions = {\n        radius: undefined,\n    };\n    export let events: string[] = [];\n\n    let circle: Circle;\n    let eventBridge: EventBridge;\n\n    setContext<LayerProvider>(Layer, () => circle);\n\n    $: {\n        if (!circle) {\n            circle = new Circle(latLng, {...options, ...{radius: radius}}).addTo(mapProvider());\n            eventBridge = new EventBridge(circle, dispatch, events);\n        }\n        circle.setLatLng(latLng);\n        circle.setRadius(radius);\n        circle.setStyle({\n            color: color,\n            weight: weight,\n            opacity: opacity,\n            lineCap: lineCap,\n            lineJoin: lineJoin,\n            dashArray: dashArray,\n            dashOffset: dashOffset,\n            fill: fill,\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            fillRule: fillRule,\n        });\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        circle.removeFrom(mapProvider());\n    });\n\n    export function getCircle(): Circle | undefined {\n        return circle;\n    }\n</script>\n\n<div>\n    {#if circle}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {\n        CircleMarker,\n        type CircleMarkerOptions, type FillRule,\n        type LatLngExpression,\n        Layer,\n        type LineCapShape, type LineJoinShape,\n        Map\n    } from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider, MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let latLng: LatLngExpression;\n    export let radius = 10;\n    export let color: string | undefined = '#3388ff';\n    export let weight: number | undefined = 3;\n    export let opacity: number | undefined = 1.0;\n    export let lineCap: LineCapShape | undefined = 'round';\n    export let lineJoin: LineJoinShape | undefined = 'round';\n    export let dashArray: string | number[] | undefined = undefined;\n    export let dashOffset: string | undefined = undefined;\n    export let fill: boolean | undefined = true;\n    export let fillColor: string | undefined = '#3388ff';\n    export let fillOpacity: number | undefined = 0.2;\n    export let fillRule: FillRule | undefined = 'evenodd';\n    export let options: CircleMarkerOptions = {};\n    export let events: string[] = [];\n\n    let circleMarker: CircleMarker;\n    let eventBridge: EventBridge;\n\n    setContext<LayerProvider>(Layer, () => circleMarker);\n\n    $: {\n        if (!circleMarker) {\n            circleMarker = new CircleMarker(latLng, options).addTo(mapProvider());\n            eventBridge = new EventBridge(circleMarker, dispatch, events);\n        }\n        circleMarker.setLatLng(latLng);\n        circleMarker.setRadius(radius);\n        circleMarker.setStyle({\n            color: color,\n            weight: weight,\n            opacity: opacity,\n            lineCap: lineCap,\n            lineJoin: lineJoin,\n            dashArray: dashArray,\n            dashOffset: dashOffset,\n            fill: fill,\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            fillRule: fillRule,\n        });\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        circleMarker.removeFrom(mapProvider());\n    });\n\n    export function getCircleMarker(): CircleMarker | undefined {\n        return circleMarker;\n    }\n</script>\n\n<div>\n    {#if circleMarker}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {GeoJSON, type GeoJSONOptions, Layer, Map} from 'leaflet';\n    import type {GeoJsonObject} from 'geojson';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider, MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let data: GeoJsonObject | undefined = undefined;\n    export let options: GeoJSONOptions = {};\n    export let events: string[] = [];\n\n    let geojson: GeoJSON;\n    let eventBridge: EventBridge;\n\n    setContext<LayerProvider>(Layer, () => geojson);\n\n    $: {\n        if (!geojson) {\n            geojson = new GeoJSON(data, options).addTo(mapProvider());\n            eventBridge = new EventBridge(geojson, dispatch, events);\n        } else if (data) {\n            geojson.clearLayers();\n            geojson.addData(data);\n        }\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        geojson.removeFrom(mapProvider());\n    });\n\n    export function getGeoJSON(): GeoJSON | undefined {\n        return geojson;\n    }\n</script>\n\n<div>\n    {#if geojson}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {getContext} from 'svelte';\n    import {Icon, type IconOptions, Marker} from 'leaflet';\n\n    import type {MarkerProvider} from '../lib/context.js';\n\n    const markerProvider = getContext<MarkerProvider>(Marker);\n\n    export let iconUrl: string;\n    export let options: IconOptions = {\n        iconUrl: '',\n    };\n\n    let icon: Icon;\n\n    $: {\n        icon = new Icon({...options, ...{iconUrl: iconUrl}});\n        markerProvider().setIcon(icon);\n    }\n\n    export function getIcon(): Icon | undefined {\n        return icon;\n    }\n</script>\n","<script lang=\"ts\">\n    import {getContext} from 'svelte';\n    import {DivIcon, type DivIconOptions, Marker} from 'leaflet';\n\n    import type {MarkerProvider} from '../lib/context.js';\n\n    const markerProvider = getContext<MarkerProvider>(Marker);\n\n    export let options: DivIconOptions = {};\n\n    let icon: DivIcon;\n    let element: HTMLElement;\n\n    $: {\n        icon = new DivIcon({...options, ...{html: element}});\n        markerProvider().setIcon(icon);\n    }\n\n    export function getIcon(): DivIcon | undefined {\n        return icon;\n    }\n</script>\n\n<div bind:this={element}>\n    <slot></slot>\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy} from 'svelte';\n    import {ImageOverlay, Map, type ImageOverlayOptions, type LatLngBoundsExpression} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let imageUrl: string;\n    export let bounds: LatLngBoundsExpression;\n    export let opacity = 1.0;\n    export let zIndex = 1;\n    export let options: ImageOverlayOptions = {};\n    export let events: string[] = [];\n\n    let imageOverlay: ImageOverlay;\n    let eventBridge: EventBridge;\n\n    $: {\n        if (!imageOverlay) {\n            imageOverlay = new ImageOverlay(imageUrl, bounds, options).addTo(mapProvider());\n            eventBridge = new EventBridge(imageOverlay, dispatch, events);\n        }\n        imageOverlay.setUrl(imageUrl);\n        imageOverlay.setOpacity(opacity);\n        imageOverlay.setZIndex(zIndex);\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        imageOverlay.removeFrom(mapProvider());\n    });\n\n    export function getImageOverlay(): ImageOverlay | undefined {\n        return imageOverlay;\n    }\n</script>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {DivIcon, Icon, type LatLngExpression, Layer, Map, Marker, type MarkerOptions} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider, MapProvider, MarkerProvider} from '../lib/context.js';\n\n    const LEAFLET_VERSION = '1.9.4';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n    const defaultIcon = new Icon({\n        iconUrl: `https://cdnjs.cloudflare.com/ajax/libs/leaflet/${LEAFLET_VERSION}/images/marker-icon.png`,\n        iconRetinaUrl: `https://cdnjs.cloudflare.com/ajax/libs/leaflet/${LEAFLET_VERSION}/images/marker-icon-2x.png`,\n        shadowUrl: `https://cdnjs.cloudflare.com/ajax/libs/leaflet/${LEAFLET_VERSION}/images/marker-shadow.png`,\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        tooltipAnchor: [16, -28],\n        shadowSize: [41, 41],\n    });\n\n    export let latLng: LatLngExpression;\n    export let zIndexOffset = 0;\n    export let icon: Icon | DivIcon = defaultIcon;\n    export let opacity = 1.0;\n    export let options: MarkerOptions = {};\n    export let events: string[] = [];\n\n    // TODO\n    //export let rotationAngle = 0;\n    //export let rotationOrigin = 'center bottom';\n\n    let marker: Marker;\n    let eventBridge: EventBridge;\n\n    setContext<LayerProvider>(Layer, () => marker);\n    setContext<MarkerProvider>(Marker, () => marker);\n\n    $: {\n        if (!marker) {\n            marker = new Marker(latLng, options).addTo(mapProvider());\n            eventBridge = new EventBridge(marker, dispatch, events);\n        }\n        marker.setLatLng(latLng);\n        marker.setZIndexOffset(zIndexOffset);\n        marker.setIcon(icon);\n        marker.setOpacity(opacity);\n\n        // TODO\n        //marker.setRotationAngle(rotationAngle);\n        //marker.setRotationOrigin(rotationOrigin);\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        marker.removeFrom(mapProvider());\n    });\n\n    export function getMarker(): Marker | undefined {\n        return marker;\n    }\n</script>\n\n<div>\n    {#if marker}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {\n        Map,\n        type LatLngExpression,\n        type LineCapShape,\n        type LineJoinShape,\n        type PolylineOptions,\n        Polyline, Layer\n    } from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let latLngs: LatLngExpression[] | LatLngExpression[][];\n    export let color: string | undefined = '#3388ff';\n    export let weight: number | undefined = 3;\n    export let opacity: number | undefined = 1.0;\n    export let lineCap: LineCapShape | undefined = 'round';\n    export let lineJoin: LineJoinShape | undefined = 'round';\n    export let dashArray: string | number[] | undefined = undefined;\n    export let dashOffset: string | undefined = undefined;\n    export let options: PolylineOptions = {};\n    export let events: string[] = [];\n\n    let polyline: Polyline;\n    let eventBridge: EventBridge;\n\n    setContext(Layer, () => polyline);\n\n    $: {\n        if (!polyline) {\n            polyline = new Polyline(latLngs, options).addTo(mapProvider());\n            eventBridge = new EventBridge(polyline, dispatch, events);\n        }\n        polyline.setLatLngs(latLngs);\n        polyline.setStyle({\n            color: color,\n            weight: weight,\n            opacity: opacity,\n            lineCap: lineCap,\n            lineJoin: lineJoin,\n            dashArray: dashArray,\n            dashOffset: dashOffset,\n        });\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        polyline.removeFrom(mapProvider());\n    });\n\n    export function getPolyline(): Polyline | undefined {\n        return polyline;\n    }\n</script>\n\n<div>\n    {#if polyline}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {\n        Map,\n        type FillRule,\n        type LatLngExpression, Layer,\n        type LineCapShape,\n        type LineJoinShape, Polygon,\n        type PolylineOptions\n    } from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let latLngs: LatLngExpression[] | LatLngExpression[][] | LatLngExpression[][][];\n    export let color: string | undefined = '#3388ff';\n    export let weight: number | undefined = 3;\n    export let opacity: number | undefined = 1.0;\n    export let lineCap: LineCapShape | undefined = 'round';\n    export let lineJoin: LineJoinShape | undefined = 'round';\n    export let dashArray: string | number[] | undefined = undefined;\n    export let dashOffset: string | undefined = undefined;\n    export let fill: boolean | undefined = true;\n    export let fillColor: string | undefined = '#3388ff';\n    export let fillOpacity: number | undefined = 0.2;\n    export let fillRule: FillRule | undefined = 'evenodd';\n    export let options: PolylineOptions = {};\n    export let events: string[] = [];\n\n    let polygon: Polygon;\n    let eventBridge: EventBridge;\n\n    setContext(Layer, () => polygon);\n\n    $: {\n        if (!polygon) {\n            polygon = new Polygon(latLngs, options).addTo(mapProvider());\n            eventBridge = new EventBridge(polygon, dispatch, events);\n        }\n        polygon.setLatLngs(latLngs);\n        polygon.setStyle({\n            color: color,\n            weight: weight,\n            opacity: opacity,\n            lineCap: lineCap,\n            lineJoin: lineJoin,\n            dashArray: dashArray,\n            dashOffset: dashOffset,\n            fill: fill,\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            fillRule: fillRule,\n        });\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        polygon.removeFrom(mapProvider());\n    });\n\n    export function getPolygon(): Polygon | undefined {\n        return polygon;\n    }\n</script>\n\n<div>\n    {#if polygon}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy} from 'svelte';\n    import {Layer, Popup, type PopupOptions} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const layerProvider = getContext<LayerProvider>(Layer);\n\n    export let events: string[] = [];\n    export let options: PopupOptions = {}\n\n    let element: HTMLElement;\n    let popup: Popup;\n    let eventBridge: EventBridge;\n\n    $: {\n        if (!popup) {\n            popup = new Popup(options);\n            eventBridge = new EventBridge(popup, dispatch, events);\n            layerProvider().bindPopup(popup);\n        }\n        popup.setContent(element);\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n    });\n\n    export function getPopup(): Popup | undefined {\n        return popup;\n    }\n</script>\n\n<div style=\"display: none;\">\n    <div bind:this={element}>\n        <slot/>\n    </div>\n</div>","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy, setContext} from 'svelte';\n    import {\n        type FillRule, type LatLngBoundsExpression,\n        Layer,\n        type LineCapShape,\n        type LineJoinShape,\n        Map,\n        type PolylineOptions,\n        Rectangle\n    } from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider, MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let latLngBounds: LatLngBoundsExpression;\n    export let color: string | undefined = '#3388ff';\n    export let weight: number | undefined = 3;\n    export let opacity: number | undefined = 1.0;\n    export let lineCap: LineCapShape | undefined = 'round';\n    export let lineJoin: LineJoinShape | undefined = 'round';\n    export let dashArray: string | number[] | undefined = undefined;\n    export let dashOffset: string | undefined = undefined;\n    export let fill: boolean | undefined = true;\n    export let fillColor: string | undefined = '#3388ff';\n    export let fillOpacity: number | undefined = 0.2;\n    export let fillRule: FillRule | undefined = 'evenodd';\n    export let options: PolylineOptions = {};\n    export let events: string[] = [];\n\n    let rectangle: Rectangle;\n    let eventBridge: EventBridge;\n\n    setContext<LayerProvider>(Layer, () => rectangle);\n\n    $: {\n        if (!rectangle) {\n            rectangle = new Rectangle(latLngBounds, options).addTo(mapProvider());\n            eventBridge = new EventBridge(rectangle, dispatch, events);\n        }\n        rectangle.setBounds(latLngBounds);\n        rectangle.setStyle({\n            color: color,\n            weight: weight,\n            opacity: opacity,\n            lineCap: lineCap,\n            lineJoin: lineJoin,\n            dashArray: dashArray,\n            dashOffset: dashOffset,\n            fill: fill,\n            fillColor: fillColor,\n            fillOpacity: fillOpacity,\n            fillRule: fillRule,\n        });\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        rectangle.removeFrom(mapProvider());\n    });\n\n    export function getRectangle(): Rectangle | undefined {\n        return rectangle;\n    }\n</script>\n\n<div>\n    {#if rectangle}\n        <slot/>\n    {/if}\n</div>\n","<script lang=\"ts\">\n    import {getContext, onDestroy} from 'svelte';\n    import {Control, type ControlPosition, Map} from 'leaflet';\n\n    import type {MapProvider} from '../lib/context.js';\n\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let position: ControlPosition = 'topright';\n    export let options: Control.ScaleOptions = {};\n\n    let scaleControl: Control.Scale;\n\n    $: {\n        if (!scaleControl) {\n            scaleControl = new Control.Scale(options).addTo(mapProvider());\n        }\n        scaleControl.setPosition(position);\n    }\n\n    onDestroy(() => {\n        scaleControl.remove();\n    });\n\n    export function getScaleControl(): Control.Scale | undefined {\n        return scaleControl;\n    }\n</script>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy} from 'svelte';\n    import {Map, TileLayer, type TileLayerOptions, type WMSOptions} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {MapProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const mapProvider = getContext<MapProvider>(Map);\n\n    export let url: string;\n    export let wms = false;\n    export let opacity = 1.0;\n    export let zIndex = 1;\n    export let options: TileLayerOptions | WMSOptions = {};\n    export let events: string[] = [];\n\n    let tileLayer: TileLayer;\n    let eventBridge: EventBridge;\n\n    $: {\n        if (!tileLayer) {\n            tileLayer = (!wms ? new TileLayer(url, options) : new TileLayer.WMS(url, options)).addTo(mapProvider());\n            eventBridge = new EventBridge(tileLayer, dispatch, events);\n        }\n        tileLayer.setUrl(url);\n        tileLayer.setOpacity(opacity);\n        tileLayer.setZIndex(zIndex);\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n        tileLayer.removeFrom(mapProvider());\n    });\n\n    export function getTileLayer(): TileLayer | undefined {\n        return tileLayer;\n    }\n</script>\n","<script lang=\"ts\">\n    import {createEventDispatcher, getContext, onDestroy} from 'svelte';\n    import {Layer, Tooltip, type TooltipOptions} from 'leaflet';\n\n    import EventBridge from '../lib/EventBridge.js';\n    import type {LayerProvider} from '../lib/context.js';\n\n    const dispatch = createEventDispatcher();\n    const layerProvider = getContext<LayerProvider>(Layer);\n\n    export let events: string[] = [];\n    export let options: TooltipOptions = {}\n\n    let element: HTMLElement;\n    let tooltip: Tooltip;\n    let eventBridge: EventBridge;\n\n    $: {\n        if (!tooltip) {\n            tooltip = new Tooltip(options);\n            eventBridge = new EventBridge(tooltip, dispatch, events);\n            layerProvider().bindTooltip(tooltip);\n        }\n        tooltip.setContent(element);\n    }\n\n    onDestroy(() => {\n        eventBridge.unregister();\n    });\n\n    export function getTooltip(): Tooltip | undefined {\n        return tooltip;\n    }\n</script>\n\n<div style=\"display: none;\">\n    <div bind:this={element}>\n        <slot/>\n    </div>\n</div>\n"],"names":["create_if_block","ctx","element"],"mappings":"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"}